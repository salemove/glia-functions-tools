---
chat_message:
  summary: Send chat message
  tags:
    - Chat
  # yamllint disable rule:line-length
  description: |
    Sends a chat message to engagement participants.

    The endpoint can be used by either a host operator, a visitor, a guest operator, or a monitor.

    Allowed message types and who can see the message depend on the sender, see the following table.

    | Sender     | Message type | Visibility                                        |
    | :--------- | :----------- | :------------------------------------------------ |
    | `operator` | `chat`       | Visitor, host operator, guest operators, monitors |
    | `visitor`  | `chat`       | Visitor, host operator, guest operators, monitors |
    | `visitor`  | `event`      | Host operator, guest operators, monitors          |
    | `monitor`  | `prompt`     | Host operator, guest operators, monitors          |

    The `message_id` in the URL must be a version 4 UUID and needs to be generated by the requester.

    See [Webhooks](ref:webhooks) for receiving chat messages via webhook events.


    ### Authorization and Permissions

    To use this endpoint, a user's or visitor's bearer access token is needed in the `Authorization` request header.

    * [User's bearer access token](https://docs.glia.com/glia-dev/reference/post_operator-authentication-tokens) - To send a message on behalf of a user. Requires one of the following:
      * The user is a participant in the engagement and the base of the user's role is one of:
        * `operator`
        * `manager`
        * `super_manager`
      * The user is monitoring the engagement and the base of the user's role is one of:
        * `manager`
        * `super_manager`
    * [Visitor's bearer access token](https://docs.glia.com/glia-dev/reference/post_visitors) - To send a message on behalf of the visitor.

    For more information about bearer access tokens, see [Authorization Header](https://docs.glia.com/glia-dev/reference/authorization-header).
  # yamllint enable rule:line-length
  parameters:
    - $ref: '../parameters/engagements.yaml#/engagement_id'
    - $ref: '../parameters/engagements.yaml#/message_id'
  requestBody:
    required: true
    content:
      application/json:
        schema:
          $ref: '../schemas/chat_message.yaml#/schema'
        examples:
          $ref: '../schemas/chat_message.yaml#/examples'
  responses:
    '200':
      description: OK

custom_command:
  summary: Send custom command
  tags:
    - Chat
  # yamllint disable rule:line-length
  description: |
    Sends a custom command that the engagement visitor web client can interpret and execute.

    The `command_id` in the URL must be a version 4 UUID and needs to be generated by the requester. Submitting a custom command twice with the same ID does not execute duplicate commands.


    ### Authorization and Permissions

    [User's bearer access token](https://docs.glia.com/glia-dev/reference/post_operator-authentication-tokens), requires:

    * Base of the user's role, one of:
      * `operator`
      * `manager`
      * `super_manager`

    For more information about bearer access tokens, see [Authorization Header](https://docs.glia.com/glia-dev/reference/authorization-header).
  # yamllint enable rule:line-length
  parameters:
    - $ref: '../parameters/engagements.yaml#/engagement_id'
    - $ref: '../parameters/engagements.yaml#/command_id'
  requestBody:
    required: true
    content:
      application/json:
        schema:
          type: object
          properties:
            content:
              type: string
              description: |
                Optional textual content that will be shown later in the transcript.
                If content is not provided, a generic message is used.
            properties:
              type: object
              description: |
                Custom command properties can be freely defined by the user.
                Must be a JSON object.
          required:
            - properties
        example:
          content: 'Custom command triggered'
          properties: {'key': 'value'}
  responses:
    '200':
      description: |
        OK

        Custom command was executed.

upload_file:
  summary: Upload file
  tags:
    - Chat
  # yamllint disable rule:line-length
  description: |
    Uploads a file that can be sent as a part of a chat message later.

    The response contains a field `security_scanning_required`. If the value of this field is `true`, the uploader must wait for the [FileSecurityScanResultEvent](https://docs.glia.com/glia-dev/reference/webhooks#filesecurityscanresultevent) to arrive before they can send the file as a part of a chat message. Additionally, the scan result must be clean to send the file.


    ### Authorization and Permissions

    To use this endpoint, a user's or visitor's bearer access token is needed in the `Authorization` request header.

    * [User's bearer access token](https://docs.glia.com/glia-dev/reference/post_operator-authentication-tokens) - To upload a file on behalf of an operator. Requires one of the following:
      * The user is not a participant in the engagement and base of the user's role is one of:
        * `manager`
        * `super_manager`
      * The user is a participant in the engagement and base of the user's role is one of:
        * `operator`
        * `manager`
        * `super_manager`
    * [Visitor's bearer access token](https://docs.glia.com/glia-dev/reference/post_visitors) - To upload a file on behalf of the visitor.

    For more information about bearer access tokens, see [Authorization Header](https://docs.glia.com/glia-dev/reference/authorization-header).
  # yamllint enable rule:line-length
  parameters:
    - $ref: '../parameters/engagements.yaml#/engagement_id'
  requestBody:
    required: true
    content:
      multipart/form-data:
        $ref: '../schemas/file_upload.yaml#/upload_engagement_file'
  responses:
    '200':
      description: |
        OK

        The file has been uploaded and the security scan has started.
      content:
        application/vnd.salemove.v1+json:
          schema:
            $ref: '../schemas/file_upload_response.yaml'

download_file:
  summary: Fetch file
  tags:
    - Chat
  # yamllint disable rule:line-length
  description: |
    Downloads a file that is part of an engagement. For example, the file has been sent as a part of a chat message.

    Returns either the contents of the file or a download URL depending on the `Accept` header:

    * `application/vnd.salemove.v1+json` - returns a JSON response containing `file_url`, which is a temporary file
    download URL that expires after a short while.
    * `*/*` - (default) returns the contents of the requested file.


    ### Authorization and Permissions

    To use this endpoint, a user's, visitor's, or site's bearer access token is needed in the `Authorization` request header.

    * [User's bearer access token](https://docs.glia.com/glia-dev/reference/post_operator-authentication-tokens) - Returns the content or download URL of the content for the user in the engagement. Requires:
      * Base of the user's role, one of:
        * `operator`
        * `manager`
        * `super_manager`
      * For the user with the `operator` base, the following must be true:
        * The user has been a participant in the engagement.
        * The user has access to at least one site where one of the engagement legs took place. Applies to both ongoing and ended engagements.
    * [Visitor's bearer access token](https://docs.glia.com/glia-dev/reference/post_visitors) - Returns the content or download URL of the content for the visitor in the engagement.
    * [Site's bearer access token](https://docs.glia.com/glia-dev/reference/post_sites-tokens) - Authorizes an application to fetch files sent in engagements on a site. Requires:
      * Scope: `engagements:read`

    For more information about bearer access tokens, see [Authorization Header](https://docs.glia.com/glia-dev/reference/authorization-header).
  # yamllint enable rule:line-length
  parameters:
    - $ref: '../parameters/engagements.yaml#/engagement_id'
    - $ref: '../parameters/engagements.yaml#/file_id'
  responses:
    '200':
      description: OK
      content:
        application/vnd.salemove.v1+json:
          schema:
            $ref: '../schemas/file_download_response.yaml#/temporary_link'
          examples:
            $ref: '../schemas/file_download_response.yaml#/temporary_link_example'
        '*/*':
          schema:
            $ref: '../schemas/file_download_response.yaml#/file'

typing_indicator:
  summary: Update typing indicator
  tags:
    - Chat
  # yamllint disable rule:line-length
  description: |
    Updates engagement participant typing indicator.

    The typing indicator allows an engagement participant to know whether another participant is currently typing or not. This brings a more fluid user experience for participants while they are exchanging chat messages.


    ### Notes

    * Sending concurrent requests might lead to requests being delivered to our API out of order. Use techniques such as throttling and debouncing to avoid this.
    * Avoid changing the typing indicator too often as it distracts engagement participants. For example, instead of changing the typing indicator to `false` every time a participant stops typing, use some heuristics, such as:
      * A participant has not typed for 3 seconds.
      * A participant deleted the whole message from the chat input box.


    ### Authorization and Permissions

    To use this endpoint, a user's or visitor's bearer access token is needed in the `Authorization` request header.

    * [User's bearer access token](https://docs.glia.com/glia-dev/reference/post_operator-authentication-tokens) - To update the indicator for the visitor about the operator typing. Requires:
      * Base of the user's role, one of:
        * `operator`
        * `manager`
        * `super_manager`
      * For the user with the `operator` base, the following must be true:
        * The user is a participant in the engagement.
    * [Visitor's bearer access token](https://docs.glia.com/glia-dev/reference/post_visitors) - To update the indicator for the operator about the visitor typing.

    For more information about bearer access tokens, see [Authorization Header](https://docs.glia.com/glia-dev/reference/authorization-header).
  # yamllint enable rule:line-length
  parameters:
    - $ref: '../parameters/engagements.yaml#/engagement_id'
  requestBody:
    required: true
    content:
      application/json:
        schema:
          type: object
          properties:
            typing:
              type: boolean
              description: |
                Whether the engagement's participant is typing or not.
              enum:
                - true
                - false
          required:
            - typing
        example:
          typing: true
  responses:
    '204':
      description: OK
    '401':
      $ref: '../../engagements_in.yaml#/components/responses/401NotAuthorized'
    '403':
      $ref: '../../engagements_in.yaml#/components/responses/403NotPartOfEngagement'
    '422':
      $ref: '../../engagements_in.yaml#/components/responses/422InvalidInput'

get_transcript:
  summary: Fetch transcript
  tags:
    - Chat
  # yamllint disable rule:line-length
  description: |
    Fetches a transcript by the engagement ID.


    ### Notes

    * When a message contains a `files` type attachment, the attachment includes the file name, content type, and URL. The URL requires the same authorization as fetching the transcript.
    * Chat messages are ordered in chronological order by the timestamp of when the engagement leg started and then by the timestamp when the chat message was sent.


    ### Authorization and Permissions

    To use this endpoint, a user's or visitor's bearer access token is needed in the `Authorization` request header.

    * [User's bearer access token](https://docs.glia.com/glia-dev/reference/post_operator-authentication-tokens)
      * To see the transcript of all engagement legs if an engagement took place on a site to which they have access, requires:
        * Base of the user's role, one of:
          * `manager`
          * `super_manager`
      * To view engagement transcripts and the preceding legs in which they participated, requires:
        * Base of the user's role, one of:
          * `operator`
          * `manager`
          * `super_manager`

    Note that if the user is no longer assigned to the site where the engagement took place, they will not receive the transcript.

    * [Visitor's bearer access token](https://docs.glia.com/glia-dev/reference/post_visitors) - Returns the transcript of the visitor whose credentials are contained in `Authorization` header.
      * The visitors can see the transcripts of all engagement legs they have participated in.

    For more information about bearer access tokens, see [Authorization Header](https://docs.glia.com/glia-dev/reference/authorization-header).
  # yamllint enable rule:line-length
  parameters:
    - $ref: '../parameters/engagements.yaml#/engagement_id'

  responses:
    '200':
      description: |
        OK

        Transcript for engagement `engagement_id` successfully retrieved.
      content:
        application/vnd.salemove.v1+json:
          schema:
            $ref: '../schemas/transcript.yaml#/schema'
          examples:
            $ref: '../schemas/transcript.yaml#/examples'
